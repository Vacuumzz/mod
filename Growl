import logging
from telethon.tl import types

from .. import loader, utils

logger = logging.getLogger(__name__)


@loader.tds
class AutoCommentMod(loader.Module):
    """Automatically comments under any channels you want"""

    strings = {
        "name": "AutoComment",
        "disabled": "‚ùå Disabled",
        "enabled": "‚úÖ Enabled",
        "status_now": "üëå AutoComment is <b>{}</b>!",
        "config_status": "Do we comment?",
        "config_channels": "Under which channels should I comment? (IDs)",
        "config_message": "What should I comment?",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "status", True, lambda: self.strings["config_status"],
            "message", "I'm the first! üòé", lambda: self.strings["config_message"],
            "channels", [], lambda: self.strings["config_channels"],
            "ignored_users", [], "List of user IDs to ignore comments from"
        )

    async def watcher(self, message):
        if not self.config["status"]:
            return
        chat_id = utils.get_chat_id(message)

        if chat_id not in self.config["channels"]:
            return

        if message.sender_id in self.config["ignored_users"]:
            return

        await self.client.send_message(
            entity=chat_id, message=self.config["message"], reply_to=message
        )
        logger.debug(f"commented on {message.id} in {chat_id}")

    async def commentcmd(self, message):
        """Toggle Module <on/off>"""
        self.config["status"] = not self.config["status"]
        status = (
            self.strings["enabled"]
            if self.config["status"]
            else self.strings["disabled"]
        )

        await utils.answer(message, self.strings["status_now"].format(status))

    async def setchannelcmd(self, message):
        """Set the channels where the bot should comment"""
        args = utils.get_args(message)
        if not args:
            return await utils.answer(message, self.strings["config_channels"])

        channels = []
        for arg in args:
            try:
                channel_id = int(arg)
                channels.append(channel_id)
            except ValueError:
                pass

        self.config["channels"] = channels
        await utils.answer(message, "Channels have been set.")

    async def setmessagecmd(self, message):
        """Set the comment message"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, self.strings["config_message"])

        self.config["message"] = args
        await utils.answer(message, "Comment message has been set.")

    async def ignorecmd(self, message):
        """Ignore comments from specific users"""
        args = utils.get_args(message)
        if not args:
            return await utils.answer(message, "Please provide user IDs to ignore comments from.")

        ignored_users = []
        for arg in args:
            try:
                user_id = int(arg)
                ignored_users.append(user_id)
            except ValueError:
                pass

        self.config["ignored_users"] = ignored_users
        await utils.answer(message, "Ignored users have been updated.")
