import logging
from telethon.tl import types

from .. import loader, utils

logger = logging.getLogger(__name__)


@loader.tds
class AutoCommentMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –∫–∞–Ω–∞–ª–∞—Ö"""

    strings = {
        "name": "AutoComment",
        "disabled": "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ",
        "enabled": "‚úÖ –í–∫–ª—é—á–µ–Ω–æ",
        "status_now": "üëå AutoComment <b>{}</b>!",
        "config_status": "–í–∫–ª—é—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏?",
        "config_channels": "–ü–æ–¥ –∫–∞–∫–∏–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ —è –¥–æ–ª–∂–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å? (ID)",
        "config_message": "–ö–∞–∫–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —è –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–≤–∏—Ç—å?",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "status", True, lambda: self.strings["config_status"],
            "message", "–Ø –ø–µ—Ä–≤—ã–π! üòé", lambda: self.strings["config_message"],
            "channels", [], lambda: self.strings["config_channels"]
        )

    async def watcher(self, message):
        if not self.config["status"]:
            return
        chat_id = utils.get_chat_id(message)

        if chat_id not in self.config["channels"]:
            return

        await self.client.send_message(
            entity=chat_id, message=self.config["message"], reply_to=message
        )
        logger.debug(f"–ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª {message.id} –≤ {chat_id}")

    async def commentcmd(self, message):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å <–≤–∫–ª/–≤—ã–∫–ª>"""
        self.config["status"] = not self.config["status"]
        status = (
            self.strings["enabled"]
            if self.config["status"]
            else self.strings["disabled"]
        )

        await utils.answer(message, self.strings["status_now"].format(status))

    async def setchannelcmd(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º–∏ –±–æ—Ç –±—É–¥–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å"""
        args = utils.get_args(message)
        if not args:
            return await utils.answer(message, self.strings["config_channels"])

        channels = []
        for arg in args:
            try:
                channel_id = int(arg)
                channels.append(channel_id)
            except ValueError:
                pass

        self.config["channels"] = channels
        await utils.answer(message, "–ö–∞–Ω–∞–ª—ã –±—ã–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

    async def setmessagecmd(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, self.strings["config_message"])

        self.config["message"] = args
        await utils.answer(message, "–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
