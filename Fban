from .. import loader, utils
from telethon.tl.types import Message


@loader.tds
class NewsLetterMod(loader.Module):
    strings = {
        "name": "NewsLetter",
        "succnews": "<b>‚úÖ Newsletter successfully sent</b>\n<b>üëÅ‚Äçüó® Chats that were sent:</b>\n<b>1Ô∏è‚É£</b> <code>{chatnews_1}</code> \n<b>2Ô∏è‚É£</b> <code>{chatnews_2}</code>\n<b>3Ô∏è‚É£</b> <code>{chatnews_3}</code>\n<b>4Ô∏è‚É£</b> <code>{chatnews_4}</code>\n<b>5Ô∏è‚É£</b> <code>{chatnews_5}</code>",
        "nochat": "<b>No chat to send</b>",
        "warnform": "<b>‚ö†Ô∏è Attention!</b>\n<b>üò∞ When sending a newsletter to a lot of chats, there may be a flood</b>\n<b>‚úÖ If you agree that you can get a flood, click on the button below</b>",
        "yes": "‚úÖ Yes",
        "no": "‚ùå No",
    }
    strings_ru = {
        "succnews": "<b>‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞</b>\n<b>üëÅ‚Äçüó® –ß–∞—Ç—ã –≤ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞:</b>\n<b>1Ô∏è‚É£</b> <code>{chatnews_1}</code>\n<b>2Ô∏è‚É£</b> <code>{chatnews_2}</code>\n<b>3Ô∏è‚É£</b> <code>{chatnews_3}</code>\n<b>4Ô∏è‚É£</b> <code>{chatnews_4}</code>\n<b>5Ô∏è‚É£</b> <code>{chatnews_5}</code>",
        "nochat": "<b>–ù–µ—Ç —á–∞—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>",
        "warnform": "<b>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!</b>\n<b>üò∞ –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–æ –º–Ω–æ–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–ª—É–¥–≤–µ–π—Ç</b>\n<b>‚úÖ –ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ç–µ–º —á—Ç–æ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ñ–ª—É–¥–≤–µ–π—Ç - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</b>",
        "yes": "‚úÖ –î–∞",
        "no": "‚ùå –ù–µ—Ç",
    }

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.warnformt = "no"

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "chatnews_1",
                None,
                lambda: "Chat for newsletter",
                validator=loader.validators.Series(
                    validator=loader.validators.TelegramID()
                ),
            ),
            loader.ConfigValue(
                "chatnews_2",
                None,
                lambda: "Chats for newsletter",
            ),
            loader.ConfigValue(
                "chatnews_3",
                None,
                lambda: "Chat for newsletter",
            ),
            loader.ConfigValue(
                "chatnews_4",
                None,
                lambda: "Chat for newsletter",
            ),
            loader.ConfigValue(
                "chatnews_5",
                None,
                lambda: "Chat for newsletter",
            ),
        )

    async def fullbancmd(self, message: Message) -> None:
        if self.get(self.warnformt) == "no":
            await self.inline.form(
                message=message,
                text=self.strings("warnform"),
                reply_markup=[
                    [
                        {
                            "text": self.strings("yes"),
                            "callback": self.inline__callAnsweryes,
                        },
                    ],
                    [
                        {
                            "text": self.strings("no"),
                            "callback": self.inline__callAnswerno,
                        },
                    ],
                ],
            )
            return

    async def inline__callAnsweryes(self, call) -> None:
        self.set(self.warnformt, "yes")
        await call.delete()

    async def inline__callAnswerno(self, call) -> None:
        self.set(self.warnformt, "no")
        await call.delete()

        chatnews_1 = self.config["chatnews_1"]
        chatnews_2 = self.config["chatnews_2"]
        chatnews_3 = self.config["chatnews_3"]
        chatnews_4 = self.config["chatnews_4"]
        chatnews_5 = self.config["chatnews_5"]
        if chatnews_1 is None:
            chatnews_1 = self.strings("nochat")
        else:
            chatnews_1 = self.config["chatnews_1"]
        if chatnews_2 is None:
            chatnews_2 = self.strings("nochat")
        else:
            chatnews_2 = self.config["chatnews_2"]
        if chatnews_3 is None:
            chatnews_3 = self.strings("nochat")
        else:
            chatnews_3 = self.config["chatnews_3"]
        if chatnews_4 is None:
            chatnews_4 = self.strings("nochat")
        else:
            chatnews_4 = self.config["chatnews_4"]
        if chatnews_5 is None:
            chatnews_5 = self.strings("nochat")
        else:
            chatnews_5 = self.config["chatnews_5"]
        args = utils.get_args_raw(message)
        if self.config["chatnews_1"] is not None:
            await self.client.send_message(self.config["chatnews_1"], args)
        if self.config["chatnews_2"] is not None:
            await self.client.send_message(self.config["chatnews_2"], args)
        if self.config["chatnews_3"] is not None:
            await self.client.send_message(self.config["chatnews_3"], args)
        if self.config["chatnews_4"] is not None:
            await self.client.send_message(self.config["chatnews_4"], args)
        if self.config["chatnews_5"] is not None:
            await self.client.send_message(self.config["chatnews_5"], args)
        await utils.answer(
            message,
            self.strings("succnews").format(
                chatnews_1=chatnews_1,
                chatnews_2=chatnews_2,
                chatnews_3=chatnews_3,
                chatnews_4=chatnews_4,
                chatnews_5=chatnews_5,
            ),
        )
