import logging

from telethon import events
from telethon.tl.types import Channel

from .. import loader, utils

logger = logging.getLogger(__name__)


@loader.tds
class AutoCommentMod(loader.Module):
    """Automatically comments under any channels you want"""

    strings = {
        "name": "AutoComment",
        "disabled": "‚ùå Disabled",
        "enabled": "‚úÖ Enabled",
        "status_now": "üëå AutoComment is now <b>{}</b>!",
        "config_status": "Should I comment?",
        "config_channels": "Under which channels should I comment? (IDs)",
        "config_message": "What should I comment?",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "status",
            True,
            lambda: self.strings["config_status"],
            validator=loader.boolean,
        )

        self.config.set("channels", [], lambda: self.strings["config_channels"])
        self.config.set("message", "I'm the first! üòé", lambda: self.strings["config_message"])

    async def watcher(self, event: events.NewMessage.Event):
        if not self.config["status"]:
            return

        chat = await event.get_chat()
        if not isinstance(chat, Channel):
            return

        chat_id = chat.id
        if chat_id not in self.config["channels"]:
            return

        await event.reply(self.config["message"])
        logger.debug(f"Commented on {event.id} in {chat_id}")

    async def commentcmd(self, message):
        """Toggle Module <on/off>"""

        self.config["status"] = not self.config["status"]
        status = self.strings["enabled"] if self.config["status"] else self.strings["disabled"]

        await utils.answer(message, self.strings["status_now"].format(status))

    async def setchannelcmd(self, message):
        """Set channels where the module will comment (pass IDs)"""

        channels = []
        args = utils.get_args(message)
        if not args:
            return await utils.answer(message, "<b>No channel IDs provided.</b>")
        for arg in args:
            try:
                channel_id = int(arg)
                channels.append(channel_id)
            except ValueError:
                pass
        self.config["channels"] = channels
        await utils.answer(message, "<b>Channels have been set successfully.</b>")

    async def setmessagecmd(self, message):
        """Set the comment message"""

        text = utils.get_args_raw(message)
        if not text:
            return await utils.answer(message, "<b>No comment message provided.</b>")
        self.config["message"] = text
        await utils.answer(message, "<b>The comment message has been set successfully.</b>")
