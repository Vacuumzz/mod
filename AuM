import logging

from telethon import events
from telethon.tl.types import Channel

from .. import loader, utils

logger = logging.getLogger(__name__)


@loader.tds
class AutoCommentMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏"""

    strings = {
        "name": "AutoComment",
        "disabled": "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ",
        "enabled": "‚úÖ –í–∫–ª—é—á–µ–Ω–æ",
        "status_now": "üëå AutoComment —Å–µ–π—á–∞—Å <b>{}</b>!",
        "config_status": "–•–æ—Ç–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å?",
        "config_channels": "–ü–æ–¥ –∫–∞–∫–∏–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ —è –¥–æ–ª–∂–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å? (ID)",
        "config_message": "–ß—Ç–æ —è –¥–æ–ª–∂–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å?",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "status",
            True,
            lambda: self.strings["config_status"],
            validator=loader.validators.Boolean(),
        )

        self.config.set("channels", [], lambda: self.strings["config_channels"])
        self.config.set("message", "–Ø –ø–µ—Ä–≤—ã–π! üòé", lambda: self.strings["config_message"])

    async def watcher(self, event: events.NewMessage.Event):
        if not self.config["status"]:
            return

        chat = await event.get_chat()
        if not isinstance(chat, Channel):
            return

        chat_id = chat.id
        if chat_id not in self.config["channels"]:
            return

        await event.reply(self.config["message"])
        logger.debug(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏ {event.id} –≤ {chat_id}")

    async def commentcmd(self, message):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å <–≤–∫–ª/–≤—ã–∫–ª>"""

        self.config["status"] = not self.config["status"]
        status = self.strings["enabled"] if self.config["status"] else self.strings["disabled"]

        await utils.answer(message, self.strings["status_now"].format(status))

    async def setchannelcmd(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–¥—É–ª—å –±—É–¥–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å (—É–∫–∞–∑—ã–≤–∞–π—Ç–µ ID)"""

        channels = []
        args = utils.get_args(message)
        if not args:
            return await utils.answer(message, "<b>–ù–µ —É–∫–∞–∑–∞–Ω—ã ID –∫–∞–Ω–∞–ª–æ–≤.</b>")
        for arg in args:
            try:
                channel_id = int(arg)
                channels.append(channel_id)
            except ValueError:
                pass
        self.config["channels"] = channels
        await utils.answer(message, "<b>–ö–∞–Ω–∞–ª—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.</b>")

    async def setmessagecmd(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""

        text = utils.get_args_raw(message)
        if not text:
            return await utils.answer(message, "<b>–ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.</b>")
        self.config["message"] = text
        await utils.answer(message, "<b>–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</b>")
